{"version":3,"sources":["AppNav.js","AgoSearch.js","Home.js","Items.js","App.js","serviceWorker.js","index.js"],"names":["AppNav","props","toggle","setState","isOpen","state","title","this","Navbar","color","dark","expand","fixed","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","className","exact","to","React","Component","AgoSearch","onSearch","q","initialQ","inline","useState","setQ","inputGroupClass","onSubmit","e","preventDefault","placeholder","value","onChange","target","type","Home","history","useHistory","push","Items","search","params","URLSearchParams","get","start","parseInt","num","parseSearch","useLocation","path","searchParams","toString","buildPath","JSON","stringify","App","Boolean","window","location","hostname","match","ReactDOM","render","basemame","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8681cf57.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem\n} from 'reactstrap';\nimport { NavLink } from 'react-router-dom';\n\nclass AppNav extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false\n    };\n  }\n\n  toggle = () => {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  };\n\n  render() {\n    const { title } = this.props;\n    return (\n      <Navbar color=\"dark\" dark expand=\"md\" fixed=\"top\">\n        <NavbarBrand href=\"#\">{title}</NavbarBrand>\n        <NavbarToggler onClick={this.toggle} />\n        <Collapse isOpen={this.state.isOpen} navbar>\n          <Nav navbar>\n            <NavItem>\n              <NavLink className=\"nav-link\" exact to=\"/\">\n                Home\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink className=\"nav-link\" to=\"/items\">\n                Items\n              </NavLink>\n            </NavItem>\n          </Nav>\n        </Collapse>\n      </Navbar>\n    );\n  }\n}\n\nexport default AppNav;\n","import React, { useState } from 'react';\n\nfunction AgoSearch({ onSearch, q: initialQ = '', inline }) {\n  const [q, setQ] = useState(initialQ);\n  const inputGroupClass = `input-group input-group-${inline ? 'sm' : 'lg'}`;\n\n  function onChange(e) {\n    // hold onto a copy of the search term\n    setQ(e.target.value);\n  }\n\n  function onSubmit(e) {\n    // don't actually submit the form\n    e.preventDefault();\n    // call search function that was passed in as a prop\n    onSearch && onSearch(q);\n  }\n\n  return (\n    <form className=\"search-form\" onSubmit={onSubmit}>\n      <div className={inputGroupClass}>\n        <input\n          className=\"form-control\"\n          placeholder=\"search for items\"\n          value={q}\n          onChange={onChange}\n        />\n        <div className=\"input-group-append\">\n          <button className=\"btn btn-secondary\" type=\"submit\">\n            Search\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n}\n\nexport default AgoSearch;\n","import React from 'react';\nimport './Home.css';\nimport AgoSearch from './AgoSearch';\nimport { useHistory } from 'react-router-dom';\n\nfunction Home() {\n  const history = useHistory();\n  function onSearch (q) {\n    history.push(`/items?q=${q}`);\n  }\n\n  return (\n    <div className=\"jumbotron\">\n      <h1 className=\"display-3 text-light text-center mb-5\">React ArcGIS REST Workshop</h1>\n      <AgoSearch onSearch={onSearch} />\n    </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport AgoSearch from './AgoSearch';\n\n// parse query string for search params or provide default values\nfunction parseSearch (search) {\n  const params = new URLSearchParams(search);\n  const q = params.get('q') || '';\n  const start = parseInt(params.get('start')) || 1;\n  const num = parseInt(params.get('num')) || 10;\n  return { q, start, num };\n}\n\nfunction buildPath(params) {\n  let searchParams = new URLSearchParams(params);\n  return `/items?${searchParams.toString()}`;\n}\n\nfunction Items() {\n  const { search } = useLocation();\n  const { q, start, num } = parseSearch(search);\n\n  const history = useHistory();\n\n  function onSearch (q) {\n    const path = buildPath({\n      q,\n      num\n    });\n    history.push(path);\n  }\n\n  return (\n    <>\n      <AgoSearch onSearch={onSearch} q={q} inline />\n      <pre><code>{JSON.stringify({ q, start, num }, null, 2)}</code></pre>\n    </>\n  );\n}\n\nexport default Items;\n","import React from 'react';\nimport AppNav from './AppNav';\nimport { Route, Switch } from 'react-router-dom';\nimport Home from './Home';\nimport Items from './Items';\n\nfunction App() {\n  return (\n    <>\n      <AppNav title=\"React ArcGIS REST Workshop\" />\n      <div className=\"container mt-5\">\n        <Switch>\n          <Route path=\"/items\">\n            <Items />\n          </Route>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router basemame=\"/react-arcgis-rest-workshop/\"><App /></Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}